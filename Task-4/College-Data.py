# -*- coding: utf-8 -*-
"""College-Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xYKIS6Z6XFowVdZ6JeYBvjsnNT1gXsAE

###### Assessment
"""

from google.colab import drive
drive.mount('/content/drive')

"""###### I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

###### import necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df1 =  pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Task-4/college_1.csv')
df2 =  pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Task-4/college_2.csv')

"""###### merge those two csv files (after getting as dataframes, get them as a single dataframe)"""

df = pd.merge(df1,df2,how = "outer")

"""###### Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv

###### if  10000<codekata score<15000   (Reached_expectations.csv)

###### if  7000<codekata score<10000   (Needs_Improvement.csv)

###### if  codekate score < 7000        (Unsatisfactory.csv)
"""

Unsatisfactory_df = df.loc[(df["CodeKata Score"] < 7000)]
Needs_improvement_df = df.loc[(df["CodeKata Score"] > 7000) & (df["CodeKata Score"] < 10000)]
Reached_expectations_df = df.loc[(df["CodeKata Score"] > 10000) & (df["CodeKata Score"] < 15000)]
Exceeded_expectations_df = df.loc[(df["CodeKata Score"]  > 15000)]

Unsatisfactory_df.to_csv("Unsatisfactory.cs",index = False)
Needs_improvement_df.to_csv("Needs_improvement.cs",index = False)
Reached_expectations_df.to_csv("Reached_expectations.cs",index = False)
Exceeded_expectations_df.to_csv("Exceeded_expectations.cs",index = False)

Unsatisfactory_df

"""###### Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

a = df["Previous Geekions"].mean()
b = df["Rising"].mean()
c = df["CodeKata Score"].mean()
print(b)
c - a

"""###### No of students participated """

len(df)

"""###### #Average completion of python course or my_sql or python english or computational thinking"""

python = df["python"].mean()
mysql = df["mysql"].mean()
python_en = df["python_en"].mean()
computational_thinking = df["computational_thinking"].mean()
print(python)
print(mysql)
print(python_en)
computational_thinking

"""###### rising star of the week (top 3 candidate who performed well in that particular week)"""

rising_df = df.loc[(df["Rising"] > 0)]
rising_df.sort_values("Rising", ascending = False)["Name"][0:3]

"""###### Shining stars of the week (top 3 candidates who has highest geekions)"""

Exceeded_expectations_df = df.loc[(df["CodeKata Score"]  > 15000)]
Exceeded_expectations_df["Name"][0:3]

"""###### Department wise codekata performence (pie chart)"""

df.groupby(['Department']).sum().plot(kind='pie', y = 'CodeKata Score',figsize=(10,10));

"""###### Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

plt.barh(y = df["Department"], width = df["CodeKata Score"])
plt.show()

ece_df = df.loc[(df["Department"]  == "Electronics and Communication Engineering")]
eee_df = df.loc[(df["Department"]  == "Electronics and Electrical Engineering")]
cse_df = df.loc[(df["Department"]  == "Computer Science and Engineering")]
va_df = ece_df.sort_values("CodeKata Score",ascending = False)[["Name","CodeKata Score","Department"]][0:1]
ua_df = eee_df.sort_values("CodeKata Score",ascending = False)[["Name","CodeKata Score","Department"]][0:1]
wa_df = cse_df.sort_values("CodeKata Score",ascending = False)[["Name","CodeKata Score","Department"]][0:1]
final1_df = pd.merge(va_df,ua_df,how = "outer")
final_df = pd.merge(final1_df,wa_df,how = "outer")
final_df
